In the `joshuwaifo-cannes-demo` project, please investigate and optimize the Character Casting Suggestion system under the Script Analysis workflow. This feature currently takes too long to return results after a script is uploaded.

Your goal is to make this casting suggestion process significantly faster and more responsive, without sacrificing quality.

Here's what you should do:

1. **Analyze the Current Flow:**
   - Locate the character casting logic, likely in `client/src/components/script/CharacterCasting.tsx` and `server/services/ai-suggestion-service.tsx`.
   - Understand how characters are extracted and sent for casting suggestions.
   - Identify if casting is being computed:
     - For all characters at once, or
     - Per character, serially (which causes slowdown)

2. **Audit AI Model Usage:**
   - Check if you're calling an AI model (OpenAI, Claude, Gemini, etc.) for each character separately.
   - If so, this is inefficient. Refactor to **batch characters together** into one prompt per scene or script to reduce latency and request overhead.
   - Simplify the AI prompt structure where possible to reduce token usage.

3. **Database Optimization:**
   - Review the actor lookup logic in the database (likely via Drizzle ORM).
   - Ensure filters (e.g., genre, gender, availability) are well-indexed and queries are not redundant.
   - Use server-side pagination or limit results if unnecessary data is being fetched.

4. **UI Optimization:**
   - In `CharacterCasting.tsx`, use React memoization (`useMemo`, `React.memo`) to avoid unnecessary re-renders.
   - Use suspense, skeletons, or loading indicators for better UX instead of blocking the entire page.

5. **Add Caching:**
   - Cache results for identical inputs (e.g., same character name and traits) using in-memory caching or a lightweight key-value store.
   - Store recent suggestions in sessionStorage or indexedDB for instant repeat access.

6. **Deliverables:**
   - Optimized casting suggestion logic with batching.
   - Improved model prompt efficiency.
   - Faster rendering and less client-side blocking.
   - Clear comments in your code highlighting what was optimized and why.

Benchmark the improvement with before/after response times and confirm suggestions load faster, ideally under 2â€“3 seconds for average scripts.
